generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid())
  name String @default("User")
  email String @unique
  password String?
  createdAt DateTime @default(now())
  canvases Canvas[]
  notes Note[]
  @@index([id])
}

model Canvas{
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String
  nodes Json
  edges Json
  messages Message[]
  notes Note[]
  PDFs PDF[]
  @@index([userId])
  @@index([id])
} 

enum ChatRole{
  user
  assistant
}

model Message{
  id String @id @default(uuid())
  canvasId String
  canvas Canvas @relation(fields: [canvasId], references: [id])
  blockId String
  role ChatRole
  content String
  createdAt DateTime @default(now())
  @@index([canvasId, blockId, createdAt])
}

model Note{
  id String @id @default(uuid())
  canvasId String 
  user User @relation(fields: [userId], references: [id])
  userId String
  canvas Canvas @relation(fields: [canvasId], references: [id])
  content String
  createdAt DateTime @default(now())
  @@index([canvasId, createdAt, id])
  // blockId String? @default(uuid())
}

model PDF{
  id String @id @default(uuid())
  canvasId String
  canvas Canvas @relation(fields: [canvasId], references: [id])
  blockId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fileName String
  fileUrl String
  fileType String
  fileSize Int
  extractedText String @db.Text
  @@index([canvasId, blockId])
}

